"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SQLite = /** @class */ (function (_super) {
    __extends(SQLite, _super);
    /**
     *
     * @param executor Executor function for Promise
     */
    function SQLite(executor) {
        var _this = _super.call(this, function (resolve, reject) {
            _this._isOpen = false;
            _this._resultType = SQLite.RESULTSASARRAY;
            _this._valuesType = SQLite.VALUESARENATIVE;
            return new Promise(executor);
        }) || this;
        /***
         * Constant that this structure is a sqlite structure
         * @type {boolean}
         */
        _this._isSqlite = true;
        return _this;
    }
    /***
     * This gets or sets the database version
     * @param ver to set or underfined to get version
     * @returns Promise<any>
     */
    SQLite.prototype.version = function (ver) {
        if (ver !== undefined) {
            return this.execSQL('PRAGMA user_version=' + (ver).toString());
        }
        else {
            return this.get('PRAGMA user_version', SQLite.RESULTSASARRAY).then(function (data) {
                return (data && data[0]);
            });
        }
    };
    ;
    /***
     * Is the database currently open
     * @returns {boolean} - true if the db is open
     */
    SQLite.prototype.isOpen = function () {
        return this._isOpen;
    };
    ;
    /***
     * Converts a Mixed Array to a String Array
     * @param params
     * @returns {Array}
     * @private
     */
    SQLite.prototype._toStringArray = function (params) {
        var stringParams = [];
        if (Object.prototype.toString.apply(params) === '[object Array]') {
            var count = params.length;
            for (var i = 0; i < count; ++i) {
                if (params[i] == null) {
                    stringParams.push(null);
                }
                else {
                    stringParams.push(params[i].toString());
                }
            }
        }
        else {
            if (params == null) {
                stringParams.push(null);
            }
            else {
                stringParams.push(params.toString());
            }
        }
        return stringParams;
    };
    ;
    /***
     * Is this a SQLite object
     * @param obj - possible sqlite object to check
     * @returns {boolean}
     */
    SQLite.isSqlite = function (obj) {
        return obj && obj._isSqlite;
    };
    ;
    // Literal Defines
    SQLite.RESULTSASARRAY = 1;
    SQLite.RESULTSASOBJECT = 2;
    SQLite.VALUESARENATIVE = 4;
    SQLite.VALUESARESTRINGS = 8;
    return SQLite;
}(Promise));
exports.SQLite = SQLite;
//# sourceMappingURL=data:application/json;base64,